-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation put_mockserver_bind
module MockServer.Operations.Put_mockserver_bind where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified MockServer.Common
import MockServer.Types

-- | > PUT /mockserver/bind
-- 
-- only supported on Netty version
put_mockserver_bind :: forall m . MockServer.Common.MonadHTTP m => Ports -- ^ The request body to send
  -> MockServer.Common.ClientT m (Network.HTTP.Client.Types.Response Put_mockserver_bindResponse) -- ^ Monadic computation which returns the result of the operation
put_mockserver_bind body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Put_mockserver_bindResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Put_mockserver_bindResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            Ports)
                                                                                                                                                                         | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Put_mockserver_bindResponse400
                                                                                                                                                                         | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Put_mockserver_bindResponse406
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (MockServer.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/mockserver/bind") GHC.Base.mempty (GHC.Maybe.Just body) MockServer.Common.RequestBodyEncodingJSON)
-- | Represents a response of the operation 'put_mockserver_bind'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Put_mockserver_bindResponseError' is used.
data Put_mockserver_bindResponse =
   Put_mockserver_bindResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Put_mockserver_bindResponse200 Ports -- ^ listening on additional requested ports, note: the response ony contains ports added for the request, to list all ports use \/status
  | Put_mockserver_bindResponse400 -- ^ incorrect request format
  | Put_mockserver_bindResponse406 -- ^ unable to bind to ports (i.e. already bound or JVM process doesn\'t have permission)
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > PUT /mockserver/bind
-- 
-- The same as 'put_mockserver_bind' but accepts an explicit configuration.
put_mockserver_bindWithConfiguration :: forall m . MockServer.Common.MonadHTTP m => MockServer.Common.Configuration -- ^ The configuration to use in the request
  -> Ports -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Put_mockserver_bindResponse) -- ^ Monadic computation which returns the result of the operation
put_mockserver_bindWithConfiguration config
                                     body = GHC.Base.fmap (\response_4 -> GHC.Base.fmap (Data.Either.either Put_mockserver_bindResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Put_mockserver_bindResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             Ports)
                                                                                                                                                                                          | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Put_mockserver_bindResponse400
                                                                                                                                                                                          | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Put_mockserver_bindResponse406
                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_4) response_4) (MockServer.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/mockserver/bind") GHC.Base.mempty (GHC.Maybe.Just body) MockServer.Common.RequestBodyEncodingJSON)
-- | > PUT /mockserver/bind
-- 
-- The same as 'put_mockserver_bind' but returns the raw 'Data.ByteString.Char8.ByteString'.
put_mockserver_bindRaw :: forall m . MockServer.Common.MonadHTTP m => Ports -- ^ The request body to send
  -> MockServer.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
put_mockserver_bindRaw body = GHC.Base.id (MockServer.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/mockserver/bind") GHC.Base.mempty (GHC.Maybe.Just body) MockServer.Common.RequestBodyEncodingJSON)
-- | > PUT /mockserver/bind
-- 
-- The same as 'put_mockserver_bind' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
put_mockserver_bindWithConfigurationRaw :: forall m . MockServer.Common.MonadHTTP m => MockServer.Common.Configuration -- ^ The configuration to use in the request
  -> Ports -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
put_mockserver_bindWithConfigurationRaw config
                                        body = GHC.Base.id (MockServer.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/mockserver/bind") GHC.Base.mempty (GHC.Maybe.Just body) MockServer.Common.RequestBodyEncodingJSON)
