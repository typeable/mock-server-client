-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation put_mockserver_clear
module MockServer.Operations.Put_mockserver_clear where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified MockServer.Common
import MockServer.Types

-- | > PUT /mockserver/clear
-- 
-- clears expectations and recorded requests that match the request matcher
put_mockserver_clear :: forall m . MockServer.Common.MonadHTTP m => GHC.Maybe.Maybe Put_mockserver_clearRequestBodyVariants -- ^ The request body to send
  -> MockServer.Common.ClientT m (Network.HTTP.Client.Types.Response Put_mockserver_clearResponse) -- ^ Monadic computation which returns the result of the operation
put_mockserver_clear body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Put_mockserver_clearResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Put_mockserver_clearResponse200
                                                                                                                                                                           | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Put_mockserver_clearResponse400
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (MockServer.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/mockserver/clear") GHC.Base.mempty body MockServer.Common.RequestBodyEncodingJSON)
-- | Defines the oneOf schema located at @paths.\/mockserver\/clear.PUT.requestBody.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data Put_mockserver_clearRequestBodyVariants =
   Put_mockserver_clearRequestBodyRequestDefinition RequestDefinition
  | Put_mockserver_clearRequestBodyExpectationId ExpectationId
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Put_mockserver_clearRequestBodyVariants
    where toJSON (Put_mockserver_clearRequestBodyRequestDefinition a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (Put_mockserver_clearRequestBodyExpectationId a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON Put_mockserver_clearRequestBodyVariants
    where parseJSON val = case (Put_mockserver_clearRequestBodyRequestDefinition Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Put_mockserver_clearRequestBodyExpectationId Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'put_mockserver_clear'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Put_mockserver_clearResponseError' is used.
data Put_mockserver_clearResponse =
   Put_mockserver_clearResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Put_mockserver_clearResponse200 -- ^ expectations and recorded requests cleared
  | Put_mockserver_clearResponse400 -- ^ incorrect request format
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > PUT /mockserver/clear
-- 
-- The same as 'put_mockserver_clear' but accepts an explicit configuration.
put_mockserver_clearWithConfiguration :: forall m . MockServer.Common.MonadHTTP m => MockServer.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe Put_mockserver_clearRequestBodyVariants -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Put_mockserver_clearResponse) -- ^ Monadic computation which returns the result of the operation
put_mockserver_clearWithConfiguration config
                                      body = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either Put_mockserver_clearResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Put_mockserver_clearResponse200
                                                                                                                                                                                            | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Put_mockserver_clearResponse400
                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (MockServer.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/mockserver/clear") GHC.Base.mempty body MockServer.Common.RequestBodyEncodingJSON)
-- | > PUT /mockserver/clear
-- 
-- The same as 'put_mockserver_clear' but returns the raw 'Data.ByteString.Char8.ByteString'.
put_mockserver_clearRaw :: forall m . MockServer.Common.MonadHTTP m => GHC.Maybe.Maybe Put_mockserver_clearRequestBodyVariants -- ^ The request body to send
  -> MockServer.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
put_mockserver_clearRaw body = GHC.Base.id (MockServer.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/mockserver/clear") GHC.Base.mempty body MockServer.Common.RequestBodyEncodingJSON)
-- | > PUT /mockserver/clear
-- 
-- The same as 'put_mockserver_clear' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
put_mockserver_clearWithConfigurationRaw :: forall m . MockServer.Common.MonadHTTP m => MockServer.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe Put_mockserver_clearRequestBodyVariants -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
put_mockserver_clearWithConfigurationRaw config
                                         body = GHC.Base.id (MockServer.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/mockserver/clear") GHC.Base.mempty body MockServer.Common.RequestBodyEncodingJSON)
