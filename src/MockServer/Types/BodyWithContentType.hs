-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema BodyWithContentType
module MockServer.Types.BodyWithContentType where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified MockServer.Common
import MockServer.TypeAlias
import {-# SOURCE #-} MockServer.Types.BinaryBodyResponse
import {-# SOURCE #-} MockServer.Types.JsonResponseBody
import {-# SOURCE #-} MockServer.Types.StringResponseBody
import {-# SOURCE #-} MockServer.Types.XmlResponseBody

-- | Defines the oneOf schema located at @components.schemas.BodyWithContentType.anyOf@ in the specification.
-- 
-- response body
data BodyWithContentTypeVariants =
   BodyWithContentTypeBinaryBodyResponse BinaryBodyResponse
  | BodyWithContentTypeJsonResponseBody JsonResponseBody
  | BodyWithContentTypeRawJsonResponseBody RawJsonResponseBody
  | BodyWithContentTypeStringResponseBody StringResponseBody
  | BodyWithContentTypeRawStringResponseBody RawStringResponseBody
  | BodyWithContentTypeXmlResponseBody XmlResponseBody
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON BodyWithContentTypeVariants
    where toJSON (BodyWithContentTypeBinaryBodyResponse a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyWithContentTypeJsonResponseBody a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyWithContentTypeRawJsonResponseBody a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyWithContentTypeStringResponseBody a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyWithContentTypeRawStringResponseBody a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyWithContentTypeXmlResponseBody a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON BodyWithContentTypeVariants
    where parseJSON val = case (BodyWithContentTypeBinaryBodyResponse Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyWithContentTypeJsonResponseBody Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyWithContentTypeRawJsonResponseBody Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyWithContentTypeStringResponseBody Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyWithContentTypeRawStringResponseBody Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyWithContentTypeXmlResponseBody Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines an alias for the schema located at @components.schemas.BodyWithContentType.anyOf@ in the specification.
-- 
-- response body
type BodyWithContentType = BodyWithContentTypeVariants
