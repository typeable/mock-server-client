-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema OpenAPIExpectation
module MockServer.Types.OpenAPIExpectation where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified MockServer.Common
import MockServer.TypeAlias

-- | Defines the object schema located at @components.schemas.OpenAPIExpectation@ in the specification.
-- 
-- 
data OpenAPIExpectation = OpenAPIExpectation {
  -- | operationsAndResponses
  openAPIExpectationOperationsAndResponses :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | specUrlOrPayload
  , openAPIExpectationSpecUrlOrPayload :: OpenAPIExpectationSpecUrlOrPayloadVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON OpenAPIExpectation
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("operationsAndResponses" Data.Aeson.Types.ToJSON..=)) (openAPIExpectationOperationsAndResponses obj) : ["specUrlOrPayload" Data.Aeson.Types.ToJSON..= openAPIExpectationSpecUrlOrPayload obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("operationsAndResponses" Data.Aeson.Types.ToJSON..=)) (openAPIExpectationOperationsAndResponses obj) : ["specUrlOrPayload" Data.Aeson.Types.ToJSON..= openAPIExpectationSpecUrlOrPayload obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON OpenAPIExpectation
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "OpenAPIExpectation" (\obj -> (GHC.Base.pure OpenAPIExpectation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "operationsAndResponses")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "specUrlOrPayload"))
-- | Create a new 'OpenAPIExpectation' with all required fields.
mkOpenAPIExpectation :: OpenAPIExpectationSpecUrlOrPayloadVariants -- ^ 'openAPIExpectationSpecUrlOrPayload'
  -> OpenAPIExpectation
mkOpenAPIExpectation openAPIExpectationSpecUrlOrPayload = OpenAPIExpectation{openAPIExpectationOperationsAndResponses = GHC.Maybe.Nothing,
                                                                             openAPIExpectationSpecUrlOrPayload = openAPIExpectationSpecUrlOrPayload}
-- | Defines the oneOf schema located at @components.schemas.OpenAPIExpectation.properties.specUrlOrPayload.anyOf@ in the specification.
-- 
-- 
data OpenAPIExpectationSpecUrlOrPayloadVariants =
   OpenAPIExpectationSpecUrlOrPayloadText Data.Text.Internal.Text
  | OpenAPIExpectationSpecUrlOrPayloadObject Data.Aeson.Types.Internal.Object
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON OpenAPIExpectationSpecUrlOrPayloadVariants
    where toJSON (OpenAPIExpectationSpecUrlOrPayloadText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (OpenAPIExpectationSpecUrlOrPayloadObject a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON OpenAPIExpectationSpecUrlOrPayloadVariants
    where parseJSON val = case (OpenAPIExpectationSpecUrlOrPayloadText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((OpenAPIExpectationSpecUrlOrPayloadObject Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
