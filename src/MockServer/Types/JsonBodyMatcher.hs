-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema JsonBodyMatcher
module MockServer.Types.JsonBodyMatcher where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified MockServer.Common
import MockServer.TypeAlias

-- | Defines the object schema located at @components.schemas.JsonBodyMatcher@ in the specification.
-- 
-- json body matcher
data JsonBodyMatcher = JsonBodyMatcher {
  -- | contentType
  jsonBodyMatcherContentType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | json
  , jsonBodyMatcherJson :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | matchType
  , jsonBodyMatcherMatchType :: (GHC.Maybe.Maybe JsonBodyMatcherMatchType)
  -- | not
  , jsonBodyMatcherNot :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | type
  , jsonBodyMatcherType :: (GHC.Maybe.Maybe JsonBodyMatcherType)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON JsonBodyMatcher
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contentType" Data.Aeson.Types.ToJSON..=)) (jsonBodyMatcherContentType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("json" Data.Aeson.Types.ToJSON..=)) (jsonBodyMatcherJson obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("matchType" Data.Aeson.Types.ToJSON..=)) (jsonBodyMatcherMatchType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("not" Data.Aeson.Types.ToJSON..=)) (jsonBodyMatcherNot obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (jsonBodyMatcherType obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contentType" Data.Aeson.Types.ToJSON..=)) (jsonBodyMatcherContentType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("json" Data.Aeson.Types.ToJSON..=)) (jsonBodyMatcherJson obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("matchType" Data.Aeson.Types.ToJSON..=)) (jsonBodyMatcherMatchType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("not" Data.Aeson.Types.ToJSON..=)) (jsonBodyMatcherNot obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (jsonBodyMatcherType obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON JsonBodyMatcher
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "JsonBodyMatcher" (\obj -> ((((GHC.Base.pure JsonBodyMatcher GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "contentType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "json")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "matchType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "not")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))
-- | Create a new 'JsonBodyMatcher' with all required fields.
mkJsonBodyMatcher :: JsonBodyMatcher
mkJsonBodyMatcher = JsonBodyMatcher{jsonBodyMatcherContentType = GHC.Maybe.Nothing,
                                    jsonBodyMatcherJson = GHC.Maybe.Nothing,
                                    jsonBodyMatcherMatchType = GHC.Maybe.Nothing,
                                    jsonBodyMatcherNot = GHC.Maybe.Nothing,
                                    jsonBodyMatcherType = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.JsonBodyMatcher.properties.matchType@ in the specification.
-- 
-- 
data JsonBodyMatcherMatchType =
   JsonBodyMatcherMatchTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | JsonBodyMatcherMatchTypeTyped Data.Aeson.Types.Internal.Object -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | JsonBodyMatcherMatchTypeEnumSTRICT -- ^ Represents the JSON value @"STRICT"@
  | JsonBodyMatcherMatchTypeEnumONLY_MATCHING_FIELDS -- ^ Represents the JSON value @"ONLY_MATCHING_FIELDS"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON JsonBodyMatcherMatchType
    where toJSON (JsonBodyMatcherMatchTypeOther val) = val
          toJSON (JsonBodyMatcherMatchTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (JsonBodyMatcherMatchTypeEnumSTRICT) = "STRICT"
          toJSON (JsonBodyMatcherMatchTypeEnumONLY_MATCHING_FIELDS) = "ONLY_MATCHING_FIELDS"
instance Data.Aeson.Types.FromJSON.FromJSON JsonBodyMatcherMatchType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "STRICT" -> JsonBodyMatcherMatchTypeEnumSTRICT
                                            | val GHC.Classes.== "ONLY_MATCHING_FIELDS" -> JsonBodyMatcherMatchTypeEnumONLY_MATCHING_FIELDS
                                            | GHC.Base.otherwise -> JsonBodyMatcherMatchTypeOther val)
-- | Defines the enum schema located at @components.schemas.JsonBodyMatcher.properties.type@ in the specification.
-- 
-- 
data JsonBodyMatcherType =
   JsonBodyMatcherTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | JsonBodyMatcherTypeTyped Data.Aeson.Types.Internal.Object -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | JsonBodyMatcherTypeEnumJSON -- ^ Represents the JSON value @"JSON"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON JsonBodyMatcherType
    where toJSON (JsonBodyMatcherTypeOther val) = val
          toJSON (JsonBodyMatcherTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (JsonBodyMatcherTypeEnumJSON) = "JSON"
instance Data.Aeson.Types.FromJSON.FromJSON JsonBodyMatcherType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "JSON" -> JsonBodyMatcherTypeEnumJSON
                                            | GHC.Base.otherwise -> JsonBodyMatcherTypeOther val)
