-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema KeyToMultiValue
module MockServer.Types.KeyToMultiValue where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified MockServer.Common
import MockServer.TypeAlias

-- | Defines the object schema located at @components.schemas.KeyToMultiValue.oneOf.items@ in the specification.
-- 
-- 
data KeyToMultiValueOneOf1 = KeyToMultiValueOneOf1 {
  -- | name
  keyToMultiValueOneOf1Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | values
  , keyToMultiValueOneOf1Values :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON KeyToMultiValueOneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (keyToMultiValueOneOf1Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("values" Data.Aeson.Types.ToJSON..=)) (keyToMultiValueOneOf1Values obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (keyToMultiValueOneOf1Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("values" Data.Aeson.Types.ToJSON..=)) (keyToMultiValueOneOf1Values obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON KeyToMultiValueOneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "KeyToMultiValueOneOf1" (\obj -> (GHC.Base.pure KeyToMultiValueOneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "values"))
-- | Create a new 'KeyToMultiValueOneOf1' with all required fields.
mkKeyToMultiValueOneOf1 :: KeyToMultiValueOneOf1
mkKeyToMultiValueOneOf1 = KeyToMultiValueOneOf1{keyToMultiValueOneOf1Name = GHC.Maybe.Nothing,
                                                keyToMultiValueOneOf1Values = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.KeyToMultiValue.oneOf@ in the specification.
-- 
-- 
data KeyToMultiValueOneOf2 = KeyToMultiValueOneOf2 {
  -- | keyMatchStyle
  keyToMultiValueOneOf2KeyMatchStyle :: (GHC.Maybe.Maybe KeyToMultiValueOneOf2KeyMatchStyle)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON KeyToMultiValueOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("keyMatchStyle" Data.Aeson.Types.ToJSON..=)) (keyToMultiValueOneOf2KeyMatchStyle obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("keyMatchStyle" Data.Aeson.Types.ToJSON..=)) (keyToMultiValueOneOf2KeyMatchStyle obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON KeyToMultiValueOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "KeyToMultiValueOneOf2" (\obj -> GHC.Base.pure KeyToMultiValueOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "keyMatchStyle"))
-- | Create a new 'KeyToMultiValueOneOf2' with all required fields.
mkKeyToMultiValueOneOf2 :: KeyToMultiValueOneOf2
mkKeyToMultiValueOneOf2 = KeyToMultiValueOneOf2{keyToMultiValueOneOf2KeyMatchStyle = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.KeyToMultiValue.oneOf.properties.keyMatchStyle@ in the specification.
-- 
-- 
data KeyToMultiValueOneOf2KeyMatchStyle =
   KeyToMultiValueOneOf2KeyMatchStyleOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | KeyToMultiValueOneOf2KeyMatchStyleTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | KeyToMultiValueOneOf2KeyMatchStyleEnumMATCHING_KEY -- ^ Represents the JSON value @"MATCHING_KEY"@
  | KeyToMultiValueOneOf2KeyMatchStyleEnumSUB_SET -- ^ Represents the JSON value @"SUB_SET"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON KeyToMultiValueOneOf2KeyMatchStyle
    where toJSON (KeyToMultiValueOneOf2KeyMatchStyleOther val) = val
          toJSON (KeyToMultiValueOneOf2KeyMatchStyleTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (KeyToMultiValueOneOf2KeyMatchStyleEnumMATCHING_KEY) = "MATCHING_KEY"
          toJSON (KeyToMultiValueOneOf2KeyMatchStyleEnumSUB_SET) = "SUB_SET"
instance Data.Aeson.Types.FromJSON.FromJSON KeyToMultiValueOneOf2KeyMatchStyle
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "MATCHING_KEY" -> KeyToMultiValueOneOf2KeyMatchStyleEnumMATCHING_KEY
                                            | val GHC.Classes.== "SUB_SET" -> KeyToMultiValueOneOf2KeyMatchStyleEnumSUB_SET
                                            | GHC.Base.otherwise -> KeyToMultiValueOneOf2KeyMatchStyleOther val)
-- | Defines the oneOf schema located at @components.schemas.KeyToMultiValue.oneOf@ in the specification.
-- 
-- 
data KeyToMultiValueVariants =
   KeyToMultiValueListTKeyToMultiValueOneOf1 ([KeyToMultiValueOneOf1])
  | KeyToMultiValueKeyToMultiValueOneOf2 KeyToMultiValueOneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON KeyToMultiValueVariants
    where toJSON (KeyToMultiValueListTKeyToMultiValueOneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (KeyToMultiValueKeyToMultiValueOneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON KeyToMultiValueVariants
    where parseJSON val = case (KeyToMultiValueListTKeyToMultiValueOneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((KeyToMultiValueKeyToMultiValueOneOf2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines an alias for the schema located at @components.schemas.KeyToMultiValue.oneOf@ in the specification.
-- 
-- 
type KeyToMultiValue = KeyToMultiValueVariants
