-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema HttpTemplate
module MockServer.Types.HttpTemplate where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified MockServer.Common
import MockServer.TypeAlias
import {-# SOURCE #-} MockServer.Types.Delay

-- | Defines the object schema located at @components.schemas.HttpTemplate@ in the specification.
-- 
-- 
data HttpTemplate = HttpTemplate {
  -- | delay: response delay
  httpTemplateDelay :: (GHC.Maybe.Maybe Delay)
  -- | template
  , httpTemplateTemplate :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | templateType
  , httpTemplateTemplateType :: (GHC.Maybe.Maybe HttpTemplateTemplateType)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON HttpTemplate
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delay" Data.Aeson.Types.ToJSON..=)) (httpTemplateDelay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("template" Data.Aeson.Types.ToJSON..=)) (httpTemplateTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("templateType" Data.Aeson.Types.ToJSON..=)) (httpTemplateTemplateType obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delay" Data.Aeson.Types.ToJSON..=)) (httpTemplateDelay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("template" Data.Aeson.Types.ToJSON..=)) (httpTemplateTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("templateType" Data.Aeson.Types.ToJSON..=)) (httpTemplateTemplateType obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON HttpTemplate
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "HttpTemplate" (\obj -> ((GHC.Base.pure HttpTemplate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "templateType"))
-- | Create a new 'HttpTemplate' with all required fields.
mkHttpTemplate :: HttpTemplate
mkHttpTemplate = HttpTemplate{httpTemplateDelay = GHC.Maybe.Nothing,
                              httpTemplateTemplate = GHC.Maybe.Nothing,
                              httpTemplateTemplateType = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.HttpTemplate.properties.templateType@ in the specification.
-- 
-- 
data HttpTemplateTemplateType =
   HttpTemplateTemplateTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | HttpTemplateTemplateTypeTyped Data.Aeson.Types.Internal.Object -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | HttpTemplateTemplateTypeEnumVELOCITY -- ^ Represents the JSON value @"VELOCITY"@
  | HttpTemplateTemplateTypeEnumJAVASCRIPT -- ^ Represents the JSON value @"JAVASCRIPT"@
  | HttpTemplateTemplateTypeEnumMUSTACHE -- ^ Represents the JSON value @"MUSTACHE"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON HttpTemplateTemplateType
    where toJSON (HttpTemplateTemplateTypeOther val) = val
          toJSON (HttpTemplateTemplateTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (HttpTemplateTemplateTypeEnumVELOCITY) = "VELOCITY"
          toJSON (HttpTemplateTemplateTypeEnumJAVASCRIPT) = "JAVASCRIPT"
          toJSON (HttpTemplateTemplateTypeEnumMUSTACHE) = "MUSTACHE"
instance Data.Aeson.Types.FromJSON.FromJSON HttpTemplateTemplateType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "VELOCITY" -> HttpTemplateTemplateTypeEnumVELOCITY
                                            | val GHC.Classes.== "JAVASCRIPT" -> HttpTemplateTemplateTypeEnumJAVASCRIPT
                                            | val GHC.Classes.== "MUSTACHE" -> HttpTemplateTemplateTypeEnumMUSTACHE
                                            | GHC.Base.otherwise -> HttpTemplateTemplateTypeOther val)
