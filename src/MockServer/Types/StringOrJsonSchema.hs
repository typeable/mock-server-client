-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema StringOrJsonSchema
module MockServer.Types.StringOrJsonSchema where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import Data.OpenApi.Internal (Schema)
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified MockServer.Common
import MockServer.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.StringOrJsonSchema.oneOf@ in the specification.
--
--
data StringOrJsonSchemaOneOf2 = StringOrJsonSchemaOneOf2 {
  -- | not
  stringOrJsonSchemaOneOf2Not :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | optional
  , stringOrJsonSchemaOneOf2Optional :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | parameterStyle
  , stringOrJsonSchemaOneOf2ParameterStyle :: (GHC.Maybe.Maybe StringOrJsonSchemaOneOf2ParameterStyle)
  -- | schema
  , stringOrJsonSchemaOneOf2Schema :: (GHC.Maybe.Maybe Schema)
  -- | value
  , stringOrJsonSchemaOneOf2Value :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON StringOrJsonSchemaOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("not" Data.Aeson.Types.ToJSON..=)) (stringOrJsonSchemaOneOf2Not obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("optional" Data.Aeson.Types.ToJSON..=)) (stringOrJsonSchemaOneOf2Optional obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parameterStyle" Data.Aeson.Types.ToJSON..=)) (stringOrJsonSchemaOneOf2ParameterStyle obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("schema" Data.Aeson.Types.ToJSON..=)) (stringOrJsonSchemaOneOf2Schema obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("value" Data.Aeson.Types.ToJSON..=)) (stringOrJsonSchemaOneOf2Value obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("not" Data.Aeson.Types.ToJSON..=)) (stringOrJsonSchemaOneOf2Not obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("optional" Data.Aeson.Types.ToJSON..=)) (stringOrJsonSchemaOneOf2Optional obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parameterStyle" Data.Aeson.Types.ToJSON..=)) (stringOrJsonSchemaOneOf2ParameterStyle obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("schema" Data.Aeson.Types.ToJSON..=)) (stringOrJsonSchemaOneOf2Schema obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("value" Data.Aeson.Types.ToJSON..=)) (stringOrJsonSchemaOneOf2Value obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON StringOrJsonSchemaOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "StringOrJsonSchemaOneOf2" (\obj -> ((((GHC.Base.pure StringOrJsonSchemaOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "not")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "optional")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "parameterStyle")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "schema")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "value"))
-- | Create a new 'StringOrJsonSchemaOneOf2' with all required fields.
mkStringOrJsonSchemaOneOf2 :: StringOrJsonSchemaOneOf2
mkStringOrJsonSchemaOneOf2 = StringOrJsonSchemaOneOf2{stringOrJsonSchemaOneOf2Not = GHC.Maybe.Nothing,
                                                      stringOrJsonSchemaOneOf2Optional = GHC.Maybe.Nothing,
                                                      stringOrJsonSchemaOneOf2ParameterStyle = GHC.Maybe.Nothing,
                                                      stringOrJsonSchemaOneOf2Schema = GHC.Maybe.Nothing,
                                                      stringOrJsonSchemaOneOf2Value = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.StringOrJsonSchema.oneOf.properties.parameterStyle@ in the specification.
-- 
-- 
data StringOrJsonSchemaOneOf2ParameterStyle =
   StringOrJsonSchemaOneOf2ParameterStyleOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | StringOrJsonSchemaOneOf2ParameterStyleTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | StringOrJsonSchemaOneOf2ParameterStyleEnumSIMPLE -- ^ Represents the JSON value @"SIMPLE"@
  | StringOrJsonSchemaOneOf2ParameterStyleEnumSIMPLE_EXPLODED -- ^ Represents the JSON value @"SIMPLE_EXPLODED"@
  | StringOrJsonSchemaOneOf2ParameterStyleEnumLABEL -- ^ Represents the JSON value @"LABEL"@
  | StringOrJsonSchemaOneOf2ParameterStyleEnumLABEL_EXPLODED -- ^ Represents the JSON value @"LABEL_EXPLODED"@
  | StringOrJsonSchemaOneOf2ParameterStyleEnumMATRIX -- ^ Represents the JSON value @"MATRIX"@
  | StringOrJsonSchemaOneOf2ParameterStyleEnumMATRIX_EXPLODED -- ^ Represents the JSON value @"MATRIX_EXPLODED"@
  | StringOrJsonSchemaOneOf2ParameterStyleEnumFORM_EXPLODED -- ^ Represents the JSON value @"FORM_EXPLODED"@
  | StringOrJsonSchemaOneOf2ParameterStyleEnumFORM -- ^ Represents the JSON value @"FORM"@
  | StringOrJsonSchemaOneOf2ParameterStyleEnumSPACE_DELIMITED_EXPLODED -- ^ Represents the JSON value @"SPACE_DELIMITED_EXPLODED"@
  | StringOrJsonSchemaOneOf2ParameterStyleEnumSPACE_DELIMITED -- ^ Represents the JSON value @"SPACE_DELIMITED"@
  | StringOrJsonSchemaOneOf2ParameterStyleEnumPIPE_DELIMITED_EXPLODED -- ^ Represents the JSON value @"PIPE_DELIMITED_EXPLODED"@
  | StringOrJsonSchemaOneOf2ParameterStyleEnumPIPE_DELIMITED -- ^ Represents the JSON value @"PIPE_DELIMITED"@
  | StringOrJsonSchemaOneOf2ParameterStyleEnumDEEP_OBJECT -- ^ Represents the JSON value @"DEEP_OBJECT"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON StringOrJsonSchemaOneOf2ParameterStyle
    where toJSON (StringOrJsonSchemaOneOf2ParameterStyleOther val) = val
          toJSON (StringOrJsonSchemaOneOf2ParameterStyleTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (StringOrJsonSchemaOneOf2ParameterStyleEnumSIMPLE) = "SIMPLE"
          toJSON (StringOrJsonSchemaOneOf2ParameterStyleEnumSIMPLE_EXPLODED) = "SIMPLE_EXPLODED"
          toJSON (StringOrJsonSchemaOneOf2ParameterStyleEnumLABEL) = "LABEL"
          toJSON (StringOrJsonSchemaOneOf2ParameterStyleEnumLABEL_EXPLODED) = "LABEL_EXPLODED"
          toJSON (StringOrJsonSchemaOneOf2ParameterStyleEnumMATRIX) = "MATRIX"
          toJSON (StringOrJsonSchemaOneOf2ParameterStyleEnumMATRIX_EXPLODED) = "MATRIX_EXPLODED"
          toJSON (StringOrJsonSchemaOneOf2ParameterStyleEnumFORM_EXPLODED) = "FORM_EXPLODED"
          toJSON (StringOrJsonSchemaOneOf2ParameterStyleEnumFORM) = "FORM"
          toJSON (StringOrJsonSchemaOneOf2ParameterStyleEnumSPACE_DELIMITED_EXPLODED) = "SPACE_DELIMITED_EXPLODED"
          toJSON (StringOrJsonSchemaOneOf2ParameterStyleEnumSPACE_DELIMITED) = "SPACE_DELIMITED"
          toJSON (StringOrJsonSchemaOneOf2ParameterStyleEnumPIPE_DELIMITED_EXPLODED) = "PIPE_DELIMITED_EXPLODED"
          toJSON (StringOrJsonSchemaOneOf2ParameterStyleEnumPIPE_DELIMITED) = "PIPE_DELIMITED"
          toJSON (StringOrJsonSchemaOneOf2ParameterStyleEnumDEEP_OBJECT) = "DEEP_OBJECT"
instance Data.Aeson.Types.FromJSON.FromJSON StringOrJsonSchemaOneOf2ParameterStyle
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "SIMPLE" -> StringOrJsonSchemaOneOf2ParameterStyleEnumSIMPLE
                                            | val GHC.Classes.== "SIMPLE_EXPLODED" -> StringOrJsonSchemaOneOf2ParameterStyleEnumSIMPLE_EXPLODED
                                            | val GHC.Classes.== "LABEL" -> StringOrJsonSchemaOneOf2ParameterStyleEnumLABEL
                                            | val GHC.Classes.== "LABEL_EXPLODED" -> StringOrJsonSchemaOneOf2ParameterStyleEnumLABEL_EXPLODED
                                            | val GHC.Classes.== "MATRIX" -> StringOrJsonSchemaOneOf2ParameterStyleEnumMATRIX
                                            | val GHC.Classes.== "MATRIX_EXPLODED" -> StringOrJsonSchemaOneOf2ParameterStyleEnumMATRIX_EXPLODED
                                            | val GHC.Classes.== "FORM_EXPLODED" -> StringOrJsonSchemaOneOf2ParameterStyleEnumFORM_EXPLODED
                                            | val GHC.Classes.== "FORM" -> StringOrJsonSchemaOneOf2ParameterStyleEnumFORM
                                            | val GHC.Classes.== "SPACE_DELIMITED_EXPLODED" -> StringOrJsonSchemaOneOf2ParameterStyleEnumSPACE_DELIMITED_EXPLODED
                                            | val GHC.Classes.== "SPACE_DELIMITED" -> StringOrJsonSchemaOneOf2ParameterStyleEnumSPACE_DELIMITED
                                            | val GHC.Classes.== "PIPE_DELIMITED_EXPLODED" -> StringOrJsonSchemaOneOf2ParameterStyleEnumPIPE_DELIMITED_EXPLODED
                                            | val GHC.Classes.== "PIPE_DELIMITED" -> StringOrJsonSchemaOneOf2ParameterStyleEnumPIPE_DELIMITED
                                            | val GHC.Classes.== "DEEP_OBJECT" -> StringOrJsonSchemaOneOf2ParameterStyleEnumDEEP_OBJECT
                                            | GHC.Base.otherwise -> StringOrJsonSchemaOneOf2ParameterStyleOther val)
-- | Defines the oneOf schema located at @components.schemas.StringOrJsonSchema.oneOf@ in the specification.
-- 
-- 
data StringOrJsonSchemaVariants =
   StringOrJsonSchemaText Data.Text.Internal.Text
  | StringOrJsonSchemaStringOrJsonSchemaOneOf2 StringOrJsonSchemaOneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON StringOrJsonSchemaVariants
    where toJSON (StringOrJsonSchemaText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (StringOrJsonSchemaStringOrJsonSchemaOneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON StringOrJsonSchemaVariants
    where parseJSON val = case (StringOrJsonSchemaText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((StringOrJsonSchemaStringOrJsonSchemaOneOf2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines an alias for the schema located at @components.schemas.StringOrJsonSchema.oneOf@ in the specification.
-- 
-- 
type StringOrJsonSchema = StringOrJsonSchemaVariants
