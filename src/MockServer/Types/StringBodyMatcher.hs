-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema StringBodyMatcher
module MockServer.Types.StringBodyMatcher where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified MockServer.Common
import MockServer.TypeAlias

-- | Defines the object schema located at @components.schemas.StringBodyMatcher@ in the specification.
-- 
-- string body matcher
data StringBodyMatcher = StringBodyMatcher {
  -- | contentType
  stringBodyMatcherContentType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | not
  , stringBodyMatcherNot :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | string
  , stringBodyMatcherString :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | subString
  , stringBodyMatcherSubString :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | type
  , stringBodyMatcherType :: (GHC.Maybe.Maybe StringBodyMatcherType)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON StringBodyMatcher
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contentType" Data.Aeson.Types.ToJSON..=)) (stringBodyMatcherContentType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("not" Data.Aeson.Types.ToJSON..=)) (stringBodyMatcherNot obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("string" Data.Aeson.Types.ToJSON..=)) (stringBodyMatcherString obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subString" Data.Aeson.Types.ToJSON..=)) (stringBodyMatcherSubString obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (stringBodyMatcherType obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contentType" Data.Aeson.Types.ToJSON..=)) (stringBodyMatcherContentType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("not" Data.Aeson.Types.ToJSON..=)) (stringBodyMatcherNot obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("string" Data.Aeson.Types.ToJSON..=)) (stringBodyMatcherString obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subString" Data.Aeson.Types.ToJSON..=)) (stringBodyMatcherSubString obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (stringBodyMatcherType obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON StringBodyMatcher
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "StringBodyMatcher" (\obj -> ((((GHC.Base.pure StringBodyMatcher GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "contentType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "not")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "string")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "subString")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))
-- | Create a new 'StringBodyMatcher' with all required fields.
mkStringBodyMatcher :: StringBodyMatcher
mkStringBodyMatcher = StringBodyMatcher{stringBodyMatcherContentType = GHC.Maybe.Nothing,
                                        stringBodyMatcherNot = GHC.Maybe.Nothing,
                                        stringBodyMatcherString = GHC.Maybe.Nothing,
                                        stringBodyMatcherSubString = GHC.Maybe.Nothing,
                                        stringBodyMatcherType = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.StringBodyMatcher.properties.type@ in the specification.
-- 
-- 
data StringBodyMatcherType =
   StringBodyMatcherTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | StringBodyMatcherTypeTyped Data.Aeson.Types.Internal.Object -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | StringBodyMatcherTypeEnumSTRING -- ^ Represents the JSON value @"STRING"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON StringBodyMatcherType
    where toJSON (StringBodyMatcherTypeOther val) = val
          toJSON (StringBodyMatcherTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (StringBodyMatcherTypeEnumSTRING) = "STRING"
instance Data.Aeson.Types.FromJSON.FromJSON StringBodyMatcherType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "STRING" -> StringBodyMatcherTypeEnumSTRING
                                            | GHC.Base.otherwise -> StringBodyMatcherTypeOther val)
