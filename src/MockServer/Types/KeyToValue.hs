-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema KeyToValue
module MockServer.Types.KeyToValue where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified MockServer.Common
import MockServer.TypeAlias

-- | Defines the object schema located at @components.schemas.KeyToValue.oneOf.items@ in the specification.
-- 
-- 
data KeyToValueOneOf1 = KeyToValueOneOf1 {
  -- | name
  keyToValueOneOf1Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | value
  , keyToValueOneOf1Value :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON KeyToValueOneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (keyToValueOneOf1Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("value" Data.Aeson.Types.ToJSON..=)) (keyToValueOneOf1Value obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (keyToValueOneOf1Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("value" Data.Aeson.Types.ToJSON..=)) (keyToValueOneOf1Value obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON KeyToValueOneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "KeyToValueOneOf1" (\obj -> (GHC.Base.pure KeyToValueOneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "value"))
-- | Create a new 'KeyToValueOneOf1' with all required fields.
mkKeyToValueOneOf1 :: KeyToValueOneOf1
mkKeyToValueOneOf1 = KeyToValueOneOf1{keyToValueOneOf1Name = GHC.Maybe.Nothing,
                                      keyToValueOneOf1Value = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @components.schemas.KeyToValue.oneOf@ in the specification.
-- 
-- 
data KeyToValueVariants =
   KeyToValueListTKeyToValueOneOf1 ([KeyToValueOneOf1])
  | KeyToValueObject Data.Aeson.Types.Internal.Object
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON KeyToValueVariants
    where toJSON (KeyToValueListTKeyToValueOneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (KeyToValueObject a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON KeyToValueVariants
    where parseJSON val = case (KeyToValueListTKeyToValueOneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((KeyToValueObject Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines an alias for the schema located at @components.schemas.KeyToValue.oneOf@ in the specification.
-- 
-- 
type KeyToValue = KeyToValueVariants
