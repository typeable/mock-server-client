-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema HttpResponse
module MockServer.Types.HttpResponse where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified MockServer.Common
import MockServer.TypeAlias
import {-# SOURCE #-} MockServer.Types.BodyWithContentType
import {-# SOURCE #-} MockServer.Types.ConnectionOptions
import {-# SOURCE #-} MockServer.Types.Delay
import {-# SOURCE #-} MockServer.Types.KeyToMultiValue
import {-# SOURCE #-} MockServer.Types.KeyToValue

-- | Defines the object schema located at @components.schemas.HttpResponse@ in the specification.
-- 
-- 
data HttpResponse = HttpResponse {
  -- | body: response body
  httpResponseBody :: (GHC.Maybe.Maybe BodyWithContentType)
  -- | connectionOptions: connection options
  , httpResponseConnectionOptions :: (GHC.Maybe.Maybe ConnectionOptions)
  -- | cookies
  , httpResponseCookies :: (GHC.Maybe.Maybe KeyToValue)
  -- | delay: response delay
  , httpResponseDelay :: (GHC.Maybe.Maybe Delay)
  -- | headers
  , httpResponseHeaders :: (GHC.Maybe.Maybe KeyToMultiValue)
  -- | reasonPhrase
  , httpResponseReasonPhrase :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | statusCode
  , httpResponseStatusCode :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON HttpResponse
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("body" Data.Aeson.Types.ToJSON..=)) (httpResponseBody obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("connectionOptions" Data.Aeson.Types.ToJSON..=)) (httpResponseConnectionOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cookies" Data.Aeson.Types.ToJSON..=)) (httpResponseCookies obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delay" Data.Aeson.Types.ToJSON..=)) (httpResponseDelay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("headers" Data.Aeson.Types.ToJSON..=)) (httpResponseHeaders obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reasonPhrase" Data.Aeson.Types.ToJSON..=)) (httpResponseReasonPhrase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statusCode" Data.Aeson.Types.ToJSON..=)) (httpResponseStatusCode obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("body" Data.Aeson.Types.ToJSON..=)) (httpResponseBody obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("connectionOptions" Data.Aeson.Types.ToJSON..=)) (httpResponseConnectionOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cookies" Data.Aeson.Types.ToJSON..=)) (httpResponseCookies obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delay" Data.Aeson.Types.ToJSON..=)) (httpResponseDelay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("headers" Data.Aeson.Types.ToJSON..=)) (httpResponseHeaders obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reasonPhrase" Data.Aeson.Types.ToJSON..=)) (httpResponseReasonPhrase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statusCode" Data.Aeson.Types.ToJSON..=)) (httpResponseStatusCode obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON HttpResponse
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "HttpResponse" (\obj -> ((((((GHC.Base.pure HttpResponse GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "body")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "connectionOptions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cookies")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "headers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reasonPhrase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statusCode"))
-- | Create a new 'HttpResponse' with all required fields.
mkHttpResponse :: HttpResponse
mkHttpResponse = HttpResponse{httpResponseBody = GHC.Maybe.Nothing,
                              httpResponseConnectionOptions = GHC.Maybe.Nothing,
                              httpResponseCookies = GHC.Maybe.Nothing,
                              httpResponseDelay = GHC.Maybe.Nothing,
                              httpResponseHeaders = GHC.Maybe.Nothing,
                              httpResponseReasonPhrase = GHC.Maybe.Nothing,
                              httpResponseStatusCode = GHC.Maybe.Nothing}
