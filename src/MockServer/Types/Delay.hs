-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Delay
module MockServer.Types.Delay where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified MockServer.Common
import MockServer.TypeAlias

-- | Defines the object schema located at @components.schemas.Delay@ in the specification.
-- 
-- response delay
data Delay = Delay {
  -- | timeUnit
  delayTimeUnit :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | value
  , delayValue :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Delay
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("timeUnit" Data.Aeson.Types.ToJSON..=)) (delayTimeUnit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("value" Data.Aeson.Types.ToJSON..=)) (delayValue obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("timeUnit" Data.Aeson.Types.ToJSON..=)) (delayTimeUnit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("value" Data.Aeson.Types.ToJSON..=)) (delayValue obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Delay
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Delay" (\obj -> (GHC.Base.pure Delay GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "timeUnit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "value"))
-- | Create a new 'Delay' with all required fields.
mkDelay :: Delay
mkDelay = Delay{delayTimeUnit = GHC.Maybe.Nothing,
                delayValue = GHC.Maybe.Nothing}
