-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Body
module MockServer.Types.Body where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified MockServer.Common
import MockServer.TypeAlias
import {-# SOURCE #-} MockServer.Types.BinaryBodyMatcher
import {-# SOURCE #-} MockServer.Types.JsonBodyMatcher
import {-# SOURCE #-} MockServer.Types.JsonPathBodyMatcher
import {-# SOURCE #-} MockServer.Types.JsonSchemaBodyMatcher
import {-# SOURCE #-} MockServer.Types.ParameterBodyMatcher
import {-# SOURCE #-} MockServer.Types.RegexBodyMatcher
import {-# SOURCE #-} MockServer.Types.StringBodyMatcher
import {-# SOURCE #-} MockServer.Types.XmlBodyMatcher
import {-# SOURCE #-} MockServer.Types.XmlSchemaBodyMatcher
import {-# SOURCE #-} MockServer.Types.XpathBodyMatcher

-- | Defines the oneOf schema located at @components.schemas.Body.anyOf@ in the specification.
-- 
-- request body matcher
data BodyVariants =
   BodyBinaryBodyMatcher BinaryBodyMatcher
  | BodyJsonBodyMatcher JsonBodyMatcher
  | BodyRawJsonBodyMatcher RawJsonBodyMatcher
  | BodyJsonSchemaBodyMatcher JsonSchemaBodyMatcher
  | BodyJsonPathBodyMatcher JsonPathBodyMatcher
  | BodyParameterBodyMatcher ParameterBodyMatcher
  | BodyRegexBodyMatcher RegexBodyMatcher
  | BodyStringBodyMatcher StringBodyMatcher
  | BodyRawStringBodyMatcher RawStringBodyMatcher
  | BodyXmlBodyMatcher XmlBodyMatcher
  | BodyXmlSchemaBodyMatcher XmlSchemaBodyMatcher
  | BodyXpathBodyMatcher XpathBodyMatcher
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON BodyVariants
    where toJSON (BodyBinaryBodyMatcher a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyJsonBodyMatcher a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyRawJsonBodyMatcher a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyJsonSchemaBodyMatcher a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyJsonPathBodyMatcher a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyParameterBodyMatcher a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyRegexBodyMatcher a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyStringBodyMatcher a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyRawStringBodyMatcher a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyXmlBodyMatcher a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyXmlSchemaBodyMatcher a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BodyXpathBodyMatcher a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON BodyVariants
    where parseJSON val = case (BodyBinaryBodyMatcher Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyJsonBodyMatcher Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyRawJsonBodyMatcher Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyJsonSchemaBodyMatcher Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyJsonPathBodyMatcher Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyParameterBodyMatcher Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyRegexBodyMatcher Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyStringBodyMatcher Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyRawStringBodyMatcher Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyXmlBodyMatcher Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyXmlSchemaBodyMatcher Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BodyXpathBodyMatcher Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))))))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines an alias for the schema located at @components.schemas.Body.anyOf@ in the specification.
-- 
-- request body matcher
type Body = BodyVariants
