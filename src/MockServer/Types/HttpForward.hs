-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema HttpForward
module MockServer.Types.HttpForward where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified MockServer.Common
import MockServer.TypeAlias
import {-# SOURCE #-} MockServer.Types.Delay

-- | Defines the object schema located at @components.schemas.HttpForward@ in the specification.
-- 
-- 
data HttpForward = HttpForward {
  -- | delay: response delay
  httpForwardDelay :: (GHC.Maybe.Maybe Delay)
  -- | host
  , httpForwardHost :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | port
  , httpForwardPort :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | scheme
  , httpForwardScheme :: (GHC.Maybe.Maybe HttpForwardScheme)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON HttpForward
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delay" Data.Aeson.Types.ToJSON..=)) (httpForwardDelay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("host" Data.Aeson.Types.ToJSON..=)) (httpForwardHost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("port" Data.Aeson.Types.ToJSON..=)) (httpForwardPort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("scheme" Data.Aeson.Types.ToJSON..=)) (httpForwardScheme obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delay" Data.Aeson.Types.ToJSON..=)) (httpForwardDelay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("host" Data.Aeson.Types.ToJSON..=)) (httpForwardHost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("port" Data.Aeson.Types.ToJSON..=)) (httpForwardPort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("scheme" Data.Aeson.Types.ToJSON..=)) (httpForwardScheme obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON HttpForward
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "HttpForward" (\obj -> (((GHC.Base.pure HttpForward GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "host")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "scheme"))
-- | Create a new 'HttpForward' with all required fields.
mkHttpForward :: HttpForward
mkHttpForward = HttpForward{httpForwardDelay = GHC.Maybe.Nothing,
                            httpForwardHost = GHC.Maybe.Nothing,
                            httpForwardPort = GHC.Maybe.Nothing,
                            httpForwardScheme = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.HttpForward.properties.scheme@ in the specification.
-- 
-- 
data HttpForwardScheme =
   HttpForwardSchemeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | HttpForwardSchemeTyped Data.Aeson.Types.Internal.Object -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | HttpForwardSchemeEnumHTTP -- ^ Represents the JSON value @"HTTP"@
  | HttpForwardSchemeEnumHTTPS -- ^ Represents the JSON value @"HTTPS"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON HttpForwardScheme
    where toJSON (HttpForwardSchemeOther val) = val
          toJSON (HttpForwardSchemeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (HttpForwardSchemeEnumHTTP) = "HTTP"
          toJSON (HttpForwardSchemeEnumHTTPS) = "HTTPS"
instance Data.Aeson.Types.FromJSON.FromJSON HttpForwardScheme
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "HTTP" -> HttpForwardSchemeEnumHTTP
                                            | val GHC.Classes.== "HTTPS" -> HttpForwardSchemeEnumHTTPS
                                            | GHC.Base.otherwise -> HttpForwardSchemeOther val)
