-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ConnectionOptions
module MockServer.Types.ConnectionOptions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified MockServer.Common
import MockServer.TypeAlias
import {-# SOURCE #-} MockServer.Types.Delay

-- | Defines the object schema located at @components.schemas.ConnectionOptions@ in the specification.
-- 
-- connection options
data ConnectionOptions = ConnectionOptions {
  -- | chunkSize
  connectionOptionsChunkSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | closeSocket
  , connectionOptionsCloseSocket :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | closeSocketDelay: response delay
  , connectionOptionsCloseSocketDelay :: (GHC.Maybe.Maybe Delay)
  -- | contentLengthHeaderOverride
  , connectionOptionsContentLengthHeaderOverride :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | keepAliveOverride
  , connectionOptionsKeepAliveOverride :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | suppressConnectionHeader
  , connectionOptionsSuppressConnectionHeader :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | suppressContentLengthHeader
  , connectionOptionsSuppressContentLengthHeader :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ConnectionOptions
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("chunkSize" Data.Aeson.Types.ToJSON..=)) (connectionOptionsChunkSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("closeSocket" Data.Aeson.Types.ToJSON..=)) (connectionOptionsCloseSocket obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("closeSocketDelay" Data.Aeson.Types.ToJSON..=)) (connectionOptionsCloseSocketDelay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contentLengthHeaderOverride" Data.Aeson.Types.ToJSON..=)) (connectionOptionsContentLengthHeaderOverride obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("keepAliveOverride" Data.Aeson.Types.ToJSON..=)) (connectionOptionsKeepAliveOverride obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("suppressConnectionHeader" Data.Aeson.Types.ToJSON..=)) (connectionOptionsSuppressConnectionHeader obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("suppressContentLengthHeader" Data.Aeson.Types.ToJSON..=)) (connectionOptionsSuppressContentLengthHeader obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("chunkSize" Data.Aeson.Types.ToJSON..=)) (connectionOptionsChunkSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("closeSocket" Data.Aeson.Types.ToJSON..=)) (connectionOptionsCloseSocket obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("closeSocketDelay" Data.Aeson.Types.ToJSON..=)) (connectionOptionsCloseSocketDelay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contentLengthHeaderOverride" Data.Aeson.Types.ToJSON..=)) (connectionOptionsContentLengthHeaderOverride obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("keepAliveOverride" Data.Aeson.Types.ToJSON..=)) (connectionOptionsKeepAliveOverride obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("suppressConnectionHeader" Data.Aeson.Types.ToJSON..=)) (connectionOptionsSuppressConnectionHeader obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("suppressContentLengthHeader" Data.Aeson.Types.ToJSON..=)) (connectionOptionsSuppressContentLengthHeader obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ConnectionOptions
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ConnectionOptions" (\obj -> ((((((GHC.Base.pure ConnectionOptions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "chunkSize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "closeSocket")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "closeSocketDelay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "contentLengthHeaderOverride")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "keepAliveOverride")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "suppressConnectionHeader")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "suppressContentLengthHeader"))
-- | Create a new 'ConnectionOptions' with all required fields.
mkConnectionOptions :: ConnectionOptions
mkConnectionOptions = ConnectionOptions{connectionOptionsChunkSize = GHC.Maybe.Nothing,
                                        connectionOptionsCloseSocket = GHC.Maybe.Nothing,
                                        connectionOptionsCloseSocketDelay = GHC.Maybe.Nothing,
                                        connectionOptionsContentLengthHeaderOverride = GHC.Maybe.Nothing,
                                        connectionOptionsKeepAliveOverride = GHC.Maybe.Nothing,
                                        connectionOptionsSuppressConnectionHeader = GHC.Maybe.Nothing,
                                        connectionOptionsSuppressContentLengthHeader = GHC.Maybe.Nothing}
