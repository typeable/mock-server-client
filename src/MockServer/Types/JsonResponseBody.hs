-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema JsonResponseBody
module MockServer.Types.JsonResponseBody where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified MockServer.Common
import MockServer.TypeAlias

-- | Defines the object schema located at @components.schemas.JsonResponseBody@ in the specification.
-- 
-- json response body
data JsonResponseBody = JsonResponseBody {
  -- | contentType
  jsonResponseBodyContentType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | json
  , jsonResponseBodyJson :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | not
  , jsonResponseBodyNot :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | type
  , jsonResponseBodyType :: (GHC.Maybe.Maybe JsonResponseBodyType)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON JsonResponseBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contentType" Data.Aeson.Types.ToJSON..=)) (jsonResponseBodyContentType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("json" Data.Aeson.Types.ToJSON..=)) (jsonResponseBodyJson obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("not" Data.Aeson.Types.ToJSON..=)) (jsonResponseBodyNot obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (jsonResponseBodyType obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contentType" Data.Aeson.Types.ToJSON..=)) (jsonResponseBodyContentType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("json" Data.Aeson.Types.ToJSON..=)) (jsonResponseBodyJson obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("not" Data.Aeson.Types.ToJSON..=)) (jsonResponseBodyNot obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (jsonResponseBodyType obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON JsonResponseBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "JsonResponseBody" (\obj -> (((GHC.Base.pure JsonResponseBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "contentType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "json")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "not")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))
-- | Create a new 'JsonResponseBody' with all required fields.
mkJsonResponseBody :: JsonResponseBody
mkJsonResponseBody = JsonResponseBody{jsonResponseBodyContentType = GHC.Maybe.Nothing,
                                      jsonResponseBodyJson = GHC.Maybe.Nothing,
                                      jsonResponseBodyNot = GHC.Maybe.Nothing,
                                      jsonResponseBodyType = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.JsonResponseBody.properties.type@ in the specification.
-- 
-- 
data JsonResponseBodyType =
   JsonResponseBodyTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | JsonResponseBodyTypeTyped Data.Aeson.Types.Internal.Object -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | JsonResponseBodyTypeEnumJSON -- ^ Represents the JSON value @"JSON"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON JsonResponseBodyType
    where toJSON (JsonResponseBodyTypeOther val) = val
          toJSON (JsonResponseBodyTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (JsonResponseBodyTypeEnumJSON) = "JSON"
instance Data.Aeson.Types.FromJSON.FromJSON JsonResponseBodyType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "JSON" -> JsonResponseBodyTypeEnumJSON
                                            | GHC.Base.otherwise -> JsonResponseBodyTypeOther val)
